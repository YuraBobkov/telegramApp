const Service = require('../models/Service');
const Order = require('../models/Order');

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
const isAdmin = (ctx) => ADMIN_IDS.includes(ctx.from.id.toString());

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
const adminCommands = (bot) => {
  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
  bot.command('add_service', async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    try {
      const args = ctx.message.text.split('\n');
      if (args.length < 5) {
        return ctx.reply(
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/add_service\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ\n–¶–µ–Ω–∞\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è\nURL –∏–∫–æ–Ω–∫–∏',
        );
      }

      const [_, name, description, price, category, icon] = args;

      const service = new Service({
        name,
        description,
        price: Number(price),
        category,
        icon: icon || 'default-icon-url',
        isActive: true,
      });

      await service.save();
      ctx.reply('–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ');
    } catch (error) {
      console.error('Error in add_service:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞');
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  bot.command('stats', async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    try {
      const totalServices = await Service.countDocuments();
      const activeServices = await Service.countDocuments({ isActive: true });
      const totalOrders = await Order.countDocuments();
      const pendingOrders = await Order.countDocuments({ status: 'pending' });
      const completedOrders = await Order.countDocuments({ status: 'completed' });

      const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–°–µ—Ä–≤–∏—Å—ã:
- –í—Å–µ–≥–æ: ${totalServices}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeServices}

–ó–∞–∫–∞–∑—ã:
- –í—Å–µ–≥–æ: ${totalOrders}
- –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingOrders}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedOrders}
`;

      ctx.reply(message);
    } catch (error) {
      console.error('Error in stats:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
  bot.command('orders', async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    try {
      const pendingOrders = await Order.find({ status: 'pending' }).populate('service').limit(5);

      if (!pendingOrders.length) {
        return ctx.reply('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏');
      }

      for (const order of pendingOrders) {
        const message = `
üî∏ –ó–∞–∫–∞–∑ #${order._id}
üì¶ –°–µ—Ä–≤–∏—Å: ${order.service.name}
üí∞ –°—É–º–º–∞: $${order.amount}
üíé –ö—Ä–∏–ø—Ç–æ: ${order.cryptoAmount} ${order.cryptoCurrency}
üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${order.userId}
‚è∞ –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleString()}
`;

        await ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                  callback_data: `complete_order:${order._id}`,
                },
                {
                  text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                  callback_data: `cancel_order:${order._id}`,
                },
              ],
            ],
          },
        });
      }
    } catch (error) {
      console.error('Error in orders:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
  bot.action(/complete_order:(.+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;

    const orderId = ctx.match[1];
    try {
      const order = await Order.findByIdAndUpdate(orderId, { status: 'completed' }, { new: true });

      if (order) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        await bot.telegram.sendMessage(
          order.userId,
          `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #${order._id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`,
        );
        await ctx.editMessageText('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ');
      }
    } catch (error) {
      console.error('Error completing order:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
  });

  bot.action(/cancel_order:(.+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;

    const orderId = ctx.match[1];
    try {
      const order = await Order.findByIdAndUpdate(orderId, { status: 'cancelled' }, { new: true });

      if (order) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
        await bot.telegram.sendMessage(
          order.userId,
          `‚ùå –í–∞—à –∑–∞–∫–∞–∑ #${order._id} –æ—Ç–º–µ–Ω–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
        );
        await ctx.editMessageText('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå');
      }
    } catch (error) {
      console.error('Error cancelling order:', error);
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞');
    }
  });
};

module.exports = adminCommands;
