const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');
const adminCommands = require('./adminCommands');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const webAppUrl = process.env.WEBAPP_URL || 'https://your-webapp-url.com';

// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
adminCommands(bot);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  try {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã! üöÄ', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–æ–≤',
              web_app: { url: webAppUrl },
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error('Error in start command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const isAdmin = process.env.ADMIN_IDS?.split(',').includes(ctx.from.id.toString());

  let helpText = `
üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/services - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin_username
  `;

  if (isAdmin) {
    helpText += `
üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/add_service - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
    `;
  }

  await ctx.reply(helpText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /services
bot.command('services', async (ctx) => {
  try {
    const services = await fetch(`${process.env.API_URL}/api/services`).then((res) => res.json());

    if (!services.length) {
      return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.');
    }

    const servicesMessage = services
      .map((service) => `üî∏ ${service.name}\n–¶–µ–Ω–∞: $${service.price}\n${service.description}\n`)
      .join('\n');

    await ctx.reply(servicesMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
              web_app: { url: webAppUrl },
            },
          ],
        ],
      },
    });
  } catch (error) {
    console.error('Error in services command:', error);
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    const data = JSON.parse(ctx.webAppData.data);

    if (data.type === 'order_init') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
      await ctx.reply(
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:

üì¶ –°–µ—Ä–≤–∏—Å: ${data.serviceName}
üí∞ –¶–µ–Ω–∞: $${data.price}

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'USDT', callback_data: `crypto_select:${data.serviceId}:USDT` },
                { text: 'BTC', callback_data: `crypto_select:${data.serviceId}:BTC` },
                { text: 'ETH', callback_data: `crypto_select:${data.serviceId}:ETH` },
              ],
            ],
          },
        },
      );
    }
  } catch (error) {
    console.error('Error processing web app data:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
bot.action(/crypto_select:(.+):(.+)/, async (ctx) => {
  try {
    const [serviceId, cryptoCurrency] = ctx.match.slice(1);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await fetch(`${process.env.API_URL}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: ctx.from.id.toString(),
        serviceId,
        cryptoCurrency,
      }),
    }).then((res) => res.json());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    await ctx.editMessageText(
      `üéâ –ó–∞–∫–∞–∑ #${order._id} —Å–æ–∑–¥–∞–Ω!

üì¶ –°–µ—Ä–≤–∏—Å: ${order.service.name}
üí∞ –°—É–º–º–∞: $${order.amount}
üíé –ö –æ–ø–ª–∞—Ç–µ: ${order.cryptoAmount} ${order.cryptoCurrency}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∞–¥—Ä–µ—Å:
\`${order.cryptoAddress}\`

‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `check_payment:${order._id}` }],
          ],
        },
      },
    );
  } catch (error) {
    console.error('Error processing crypto selection:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
bot.action(/check_payment:(.+)/, async (ctx) => {
  const orderId = ctx.match[1];
  await ctx.reply(
    '–ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.',
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = bot;
