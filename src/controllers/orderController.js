const Order = require('../models/Order');
const Service = require('../models/Service');
const CryptoService = require('../services/cryptoService');
const NotificationService = require('../services/notificationService');

const cryptoService = new CryptoService();
const notificationService = new NotificationService(require('../bot'));

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
exports.createOrder = async (req, res) => {
  try {
    const { userId, serviceId, cryptoCurrency } = req.body;

    const service = await Service.findById(serviceId);
    if (!service) {
      return res.status(404).json({ message: '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    const cryptoAddress = await cryptoService.generatePaymentAddress(cryptoCurrency);
    const cryptoAmount = await cryptoService.calculateCryptoAmount(service.price, cryptoCurrency);

    const order = new Order({
      userId,
      service: serviceId,
      amount: service.price,
      cryptoAddress,
      cryptoAmount,
      cryptoCurrency,
    });

    const newOrder = await order.save();
    const populatedOrder = await Order.findById(newOrder._id).populate('service');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    await notificationService.notifyNewOrder(populatedOrder);

    res.status(201).json(populatedOrder);
  } catch (error) {
    console.error('Error creating order:', error);
    res.status(400).json({ message: error.message });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getUserOrders = async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.params.userId })
      .populate('service')
      .sort({ createdAt: -1 });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const order = await Order.findByIdAndUpdate(req.params.id, { status }, { new: true }).populate(
      'service',
    );

    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    let userMessage = '';
    switch (status) {
      case 'completed':
        userMessage = `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #${order._id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–°–µ—Ä–≤–∏—Å: ${order.service.name}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`;
        break;
      case 'cancelled':
        userMessage = `‚ùå –í–∞—à –∑–∞–∫–∞–∑ #${order._id} –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
        break;
      case 'paid':
        userMessage = `üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order._id}!\n\n–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.`;
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
        await notificationService.notifyPaymentReceived(order);
        break;
    }

    if (userMessage) {
      await notificationService.notifyUser(order.userId, userMessage);
    }

    res.json(order);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};
