const Order = require('../models/Order');

class NotificationService {
  constructor(bot) {
    this.bot = bot;
    this.adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',') : [];
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
  async notifyNewOrder(order) {
    try {
      const populatedOrder = await Order.findById(order._id).populate('service');

      const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üî∏ –ó–∞–∫–∞–∑ #${order._id}
üì¶ –°–µ—Ä–≤–∏—Å: ${populatedOrder.service.name}
üí∞ –°—É–º–º–∞: $${order.amount}
üíé –ö—Ä–∏–ø—Ç–æ: ${order.cryptoAmount} ${order.cryptoCurrency}
üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${order.userId}
‚è∞ –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleString()}

/orders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      for (const adminId of this.adminIds) {
        await this.bot.telegram.sendMessage(adminId, message);
      }
    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞
  async notifyPaymentReceived(order) {
    try {
      const message = `
üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞!

üî∏ –ó–∞–∫–∞–∑ #${order._id}
üíé –°—É–º–º–∞: ${order.cryptoAmount} ${order.cryptoCurrency}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
/confirm_payment_${order._id}
`;

      for (const adminId of this.adminIds) {
        await this.bot.telegram.sendMessage(adminId, message);
      }
    } catch (error) {
      console.error('Error sending payment notification:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
  async notifyUser(userId, message) {
    try {
      await this.bot.telegram.sendMessage(userId, message);
    } catch (error) {
      console.error('Error sending user notification:', error);
    }
  }
}

module.exports = NotificationService;
