const Order = require('../models/Order');
const CryptoService = require('./cryptoService');
const NotificationService = require('./notificationService');

class PaymentMonitorService {
  constructor(bot) {
    this.cryptoService = new CryptoService();
    this.notificationService = new NotificationService(bot);
    this.monitoringInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  startMonitoring() {
    setInterval(() => this.checkPendingPayments(), this.monitoringInterval);
    console.log('Payment monitoring started');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤
  async checkPendingPayments() {
    try {
      const pendingOrders = await Order.find({ status: 'pending' }).populate('service');

      for (const order of pendingOrders) {
        const paymentStatus = await this.cryptoService.checkPaymentStatus(
          order.cryptoAddress,
          order.cryptoAmount,
          order.cryptoCurrency,
        );

        if (paymentStatus.status === 'confirmed') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
          order.status = 'paid';
          await order.save();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await this.notificationService.notifyPaymentReceived(order);
          await this.notificationService.notifyUser(
            order.userId,
            `üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order._id}!\n–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.`,
          );
        } else if (paymentStatus.status === 'failed') {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
          order.status = 'cancelled';
          await order.save();

          await this.notificationService.notifyUser(
            order.userId,
            `‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #${order._id} –Ω–µ —É–¥–∞–ª–∞—Å—å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
          );
        }
      }
    } catch (error) {
      console.error('Error checking pending payments:', error);
    }
  }
}

module.exports = PaymentMonitorService;
