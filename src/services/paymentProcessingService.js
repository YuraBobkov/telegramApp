const Order = require('../models/Order');
const CryptoPaymentService = require('./cryptoPaymentService');
const NotificationService = require('./notificationService');

class PaymentProcessingService {
  constructor(bot) {
    this.cryptoService = new CryptoPaymentService();
    this.notificationService = new NotificationService(bot);
    this.processingInterval = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
  }

  // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  startProcessing() {
    setInterval(() => this.processPayments(), this.processingInterval);
    console.log('Payment processing started');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  async processPayments() {
    try {
      const pendingOrders = await Order.find({ status: 'pending' }).populate('service');

      for (const order of pendingOrders) {
        await this.processOrder(order);
      }
    } catch (error) {
      console.error('Error processing payments:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  async processOrder(order) {
    try {
      const balance = await this.cryptoService.checkAddressBalance(
        order.cryptoAddress,
        order.cryptoCurrency,
      );

      if (!balance) return;

      const rate = await this.cryptoService.getExchangeRate(order.cryptoCurrency);
      if (!rate) return;

      const expectedAmount = order.amount / rate;
      const tolerance = 0.001; // –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.1%

      if (Math.abs(balance.balance - expectedAmount) <= tolerance * expectedAmount) {
        // –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω
        order.status = 'paid';
        await order.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await this.notificationService.notifyPaymentReceived(order);
        await this.notificationService.notifyUser(
          order.userId,
          `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order._id}!\n–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.`,
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await this.processSuccessfulPayment(order);
      } else if (balance.balance > 0) {
        // –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
        await this.notificationService.notifyUser(
          order.userId,
          `‚ö†Ô∏è –î–ª—è –∑–∞–∫–∞–∑–∞ #${order._id} –ø–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.\n–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedAmount} ${order.cryptoCurrency}\n–ü–æ–ª—É—á–µ–Ω–æ: ${balance.balance} ${order.cryptoCurrency}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`,
        );
      }
    } catch (error) {
      console.error(`Error processing order ${order._id}:`, error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  async processSuccessfulPayment(order) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª—é—á–µ–π, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –∏ —Ç.–¥.

      // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notificationService.notifyAdmins(
        `üéâ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #${order._id}\n–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!`,
      );
    } catch (error) {
      console.error(`Error processing successful payment for order ${order._id}:`, error);
    }
  }
}

module.exports = PaymentProcessingService;
